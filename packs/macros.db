{"name":"Pessoa (Atualiza Sozinha)","type":"script","author":"tnmjg5BEY2dKOg7l","img":"icons/sundries/gaming/chess-knight-white-glass.webp","scope":"global","command":"macroRun('Pessoa');\n\nasync function macroRun(macroName, compendiumName='scum-and-villainy-pt-br.macros') {  \n  let pack = game.packs.get(compendiumName);\n  let macro = ( await pack.getDocuments() ).find(i => (i.data.name==macroName) );\n  await macro.execute();    \n}","folder":null,"sort":0,"permission":{"default":0,"tnmjg5BEY2dKOg7l":3},"flags":{"core":{"sourceId":"Macro.m7c4WJTMOwo4WZL7"}},"_id":"706Fc0GqJBdf2Zry"}
{"name":"Arruma Classes","type":"script","author":"tnmjg5BEY2dKOg7l","img":"icons/svg/dice-target.svg","scope":"global","command":"const version = 'v1.1';\n\n/* Patch Actors\n\nTODO \n- \n\nsource: https://raw.githubusercontent.com/brunocalado/mestre-digital/master/Foundry%20VTT/Macros/Forged%20in%20the%20Dark/scum-villainy_patch_actors.js\nicon: icons/tools/smithing/hammer-sledge-steel-grey.webp\n*/\n\nlet message=``;\nlet characters = game.actors.contents.filter(e => e.data.type === 'character');\nlet ships = game.actors.contents.filter(e => e.data.type === 'ship');\n\nif (characters==undefined && ships==undefined) {\n  ui.notifications.warn(\"You don't have characters or ships!\");    \n} else {\n  \n  // VARS  \n  const effects = ['Mechanic class', 'Muscle class', 'Mystic class', 'Pilot class', 'Scoundrel class', 'Speaker class', 'Stitch class'];\n  const playbooks = ['Mechanic', 'Muscle', 'Mystic', 'Pilot', 'Scoundrel', 'Speaker', 'Stitch'];\n  \n  if (characters!=undefined) {\n    for(const character of characters) {\n      for (var i=0; i<=effects.length; i++) {     \n        const effect = character.effects.find(e => e.data.label === effects[i]);\n        if (effect!=undefined) {\n          let changes = duplicate(effect.data.changes);        \n          const playbookName = changes[0].value;\n          if ( playbooks.includes(playbookName) ) {\n            changes[0].value = translatePlaybook(playbookName);\n            message += `<h2>${character.name}</h2><p>${playbookName} foi trocado por ${translatePlaybook(playbookName)}</p>`;\n            await effect.update({changes});          \n          } else {\n            message += `<h2>${character.name}</h2><p>Nada foi feito. Tudo certo.</p>`;\n          }          \n        }      \n      }\n    }\n  }\n  \n  // VARS\n  const effectsShip = ['Firedrake type', 'Stardancer type', 'Firedrake class', 'Stardancer class'];\n  const playbooksShip = ['Firedrake', 'Stardancer'];\n\n  if (ships!=undefined) {\n    for(const ship of ships) {\n      for (var i=0; i<=effectsShip.length; i++) {     \n        const effect = ship.effects.find(e => e.data.label === effectsShip[i]);\n        if (effect!=undefined) {\n          let changes = duplicate(effect.data.changes); // ALL EFFECTS\n          let changesBut = changes.filter(e => e.key !== 'data.ship_class'); // all effects but the one that will be changed.                 \n          let selectedEffect = changes.find(e => e.key === 'data.ship_class');\n          let playbookName = selectedEffect.value;\n          console.log(playbookName);\n          if ( playbooksShip.includes(playbookName) ) {\n            selectedEffect.value = translateShip(playbookName);\n            changesBut.push(selectedEffect);\n            message += `<h2>${ship.name}</h2><p>${playbookName} foi trocado por ${translateShip(playbookName)}</p>`;\n            await effect.update({changes: changesBut});                \n          } else {\n            message += `<h2>${ship.name}</h2><p>Nada foi feito. Tudo certo.</p>`;\n          }          \n        }      \n      }\n    }\n  }\n\n  // to chat\n  let chatData = {\n    user: game.user.id,\n    speaker: ChatMessage.getSpeaker(),\n    content: message\n  };\n\n  ChatMessage.create(chatData, {});\n}\n\nfunction translatePlaybook(playbook) {\n  if (playbook == 'Mechanic') {\n    return 'Mecânico';\n  } else if (playbook == 'Muscle') {\n    return 'Músculo';\n  } else if (playbook == 'Mystic') {\n    return 'Místico';\n  } else if (playbook == 'Pilot') {\n    return 'Piloto';\n  } else if (playbook == 'Scoundrel') {\n    return 'Malandro';\n  } else if (playbook == 'Speaker') {\n    return 'Comunicador';\n  } else if (playbook == 'Stitch') {\n    return 'Costureiro';\n  }\n}\n\nfunction translateShip(playbook) {\n  if (playbook == 'Firedrake') {\n    return 'Dragão de Fogo';\n  } else if (playbook == 'Stardancer') {\n    return 'Dançarina Estelar';\n  } else {\n    return playbook;\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"tnmjg5BEY2dKOg7l":3},"flags":{"core":{"sourceId":"Macro.5pmTz4gvcKQMsLZW"}},"_id":"EPqYyMpNxqlqbLn6"}
{"name":"Gerar Trabalho","type":"script","author":"tnmjg5BEY2dKOg7l","img":"icons/svg/dice-target.svg","scope":"global","command":"/* - v1.1\nSource:\nIcon: \nIcon2: icons/environment/people/commoner.webp\n*/\n\n(async () => {\n  const faction1 = await drawFromTable('Facções');\n  const faction2 = await drawFromTable('Facções');\n  const client = await drawFromTable('Cliente/Alvo');\n  const target = await drawFromTable('Cliente/Alvo');\n  const twist = await drawFromTable('Reviravolta ou Complicação');\n  const place = await drawFromTable('Local da Tarefa');\n  const task = await drawFromTable('Tarefa');\n  const connection = await drawFromTable('Conexão');\n\n  let msg = `<h2>Trabalho</h2>`;\n  msg += `<ul><li>Facção 1: <b>${faction1}</b></li>`;\n  msg += `<li>Facção 2: <b>${faction2}</b></li>`;\n  msg += `<li>Cliente: <b>${client}</b></li>`;\n  msg += `<li>Alvo: <b>${target}</b></li>`;\n  msg += `<li>Reviravolta ou Complicação: <b>${twist}</b></li>`;\n  msg += `<li>Local da Tarefa: <b>${place}</b></li>`;\n  msg += `<li>Tarefa: <b>${task}</b></li>`;\n  msg += `<li>Conexão: <b>${connection}</b></li></ul>`;  \n\n  msg+= `<br>`;\n  msg+= await createPeople();\n  msg+= `<br>`;\n  msg+= await createPeople();  \n  \n  let message=msg;\n  message += `<p>Personagens serão criados dentro do registro criado.</p>`; // vai para o chat\n\n  let data = {\n    name: `${task}`,\n    content: msg\n  };\n  addEventListenerOnHtmlElement(\"#createNPC\", 'click', (e) => {    \n    createNPC(data);    \n  });          \n  \n  message+=`<button style=\"background:#d10000;color:white\" id=\"createNPC\">Criar</button>`;\n  \n  let chatData = {\n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };  \n  ChatMessage.create(chatData, {});  \n\n})()\n\n/* Functions */\nasync function drawFromTable(tableName) {\n\n  let list_compendium = await game.packs.filter(p=>p.documentName=='RollTable');      \n  let inside = await list_compendium.filter( p=>p.metadata.label=='Tabelas' )[0].getDocuments();      \n  const table = await inside.filter( p=>p.name==tableName )[0];          \n  \n  if (!table) {\n    ui.notifications.warn(`Table ${tableName} not found.`, {});\n    return;\n  }\n  const output = await table.roll();\n  const result = output.results[0].data.text;\n  return result;  \n}\n\nfunction addEventListenerOnHtmlElement(element, event, func){    \n    Hooks.once(\"renderChatMessage\", (chatItem, html) => { // Use Hook to add event to chat message html element\n        html[0].querySelector(element).addEventListener(event, func);        \n    });\n} // end addEventListenerOnHtmlElement\n\nasync function createNPC(data) {  \n  const instantAdventure = await JournalEntry.create(data);\n  await instantAdventure.sheet.render(true);    \n}\n\nasync function createPeople() {\n  const name1 = await drawFromTable('Nomes');\n  const surname = await drawFromTable('Sobrenomes');\n  const aparen1 = await drawFromTable('Aparência - Identidade');\n  const aparen2 = await drawFromTable('Aparência');\n  const alias = await drawFromTable('Codinomes');\n\n  let msg = `<h2>${name1} ${surname} (${alias})</h2>`;\n  msg += `<ul><li>Sugestão de Identidade: <b>${aparen1}</b></li>`;\n  msg += `<li>Aparência: <b>${aparen2}</b></li></ul>`;\n  \n  return msg;\n}","folder":null,"sort":0,"permission":{"default":0,"tnmjg5BEY2dKOg7l":3},"flags":{"core":{"sourceId":"Macro.mlPV7sbRYrIcEKIU"}},"_id":"GEKq1lHzjXcr9VTM"}
{"name":"Pessoa","type":"script","author":"tnmjg5BEY2dKOg7l","img":"icons/svg/dice-target.svg","scope":"global","command":"/* - v1.0\nSource:\nIcon: \n*/\n\n(async () => {\n  const name1 = await drawFromTable('Nomes');\n  const surname = await drawFromTable('Sobrenomes');\n  const aparen1 = await drawFromTable('Aparência - Identidade');\n  const aparen2 = await drawFromTable('Aparência');\n  const alias = await drawFromTable('Codinomes');\n\n  let msg = `<h2>${name1} ${surname} (${alias})</h2>`;\n  msg += `<ul><li>Sugestão de Identidade: <b>${aparen1}</b></li>`;\n  msg += `<li>Aparência: <b>${aparen2}</b></li></ul>`;\n  \n  let message=msg;\n\n  let data = {\n    name: `${name1}`,\n    content: msg\n  };\n  addEventListenerOnHtmlElement(\"#createNPC\", 'click', (e) => {    \n    createNPC(data);    \n  });          \n  \n  message+=`<button style=\"background:#d10000;color:white\" id=\"createNPC\">Criar</button>`;\n  \n  let chatData = {\n    content: message,\n    whisper : ChatMessage.getWhisperRecipients(\"GM\")\n  };  \n  ChatMessage.create(chatData, {});  \n\n})()\n\n/* Functions */\nasync function drawFromTable(tableName) {\n\n  let list_compendium = await game.packs.filter(p=>p.documentName=='RollTable');      \n  let inside = await list_compendium.filter( p=>p.metadata.label=='Tabelas' )[0].getDocuments();      \n  const table = await inside.filter( p=>p.name==tableName )[0];          \n  \n  if (!table) {\n    ui.notifications.warn(`Table ${tableName} not found.`, {});\n    return;\n  }\n  const output = await table.roll();\n  const result = output.results[0].data.text;\n  return result;  \n}\n\nfunction addEventListenerOnHtmlElement(element, event, func){    \n    Hooks.once(\"renderChatMessage\", (chatItem, html) => { // Use Hook to add event to chat message html element\n        html[0].querySelector(element).addEventListener(event, func);        \n    });\n} // end addEventListenerOnHtmlElement\n\nasync function createNPC(data) {  \n  const instantAdventure = await JournalEntry.create(data);\n  await instantAdventure.sheet.render(true);    \n}","folder":null,"sort":0,"permission":{"default":0,"tnmjg5BEY2dKOg7l":3},"flags":{"core":{"sourceId":"Macro.d1ryjcCPKhT7M6nn"}},"_id":"IiNd1XfHs6OdqVdF"}
{"name":"Gerar Trabalho (Atualiza Sozinha)","type":"script","author":"tnmjg5BEY2dKOg7l","img":"icons/skills/targeting/crosshair-triple-strike-orange.webp","scope":"global","command":"macroRun('Gerar Trabalho');\n\nasync function macroRun(macroName, compendiumName='scum-and-villainy-pt-br.macros') {  \n  let pack = game.packs.get(compendiumName);\n  let macro = ( await pack.getDocuments() ).find(i => (i.data.name==macroName) );\n  await macro.execute();    \n}","folder":null,"sort":0,"permission":{"default":0,"tnmjg5BEY2dKOg7l":3},"flags":{"core":{"sourceId":"Macro.f5oQ2B6M7o4TCs58"}},"_id":"UnHMRKjR2hJrPN9r"}
{"name":"Arruma Classes (Atualiza Sozinha)","type":"script","author":"tnmjg5BEY2dKOg7l","img":"icons/tools/smithing/hammer-sledge-steel-grey.webp","scope":"global","command":"macroRun('Arruma Classes');\n\nasync function macroRun(macroName, compendiumName='scum-and-villainy-pt-br.macros') {  \n  let pack = game.packs.get(compendiumName);\n  let macro = ( await pack.getDocuments() ).find(i => (i.data.name==macroName) );\n  await macro.execute();    \n}","folder":null,"sort":0,"permission":{"default":0,"tnmjg5BEY2dKOg7l":3},"flags":{"core":{"sourceId":"Macro.sdQW0DGP72oDxAjF"}},"_id":"hwbwKSh7VTv5ccPZ"}
